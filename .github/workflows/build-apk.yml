name: Build APK

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Step 3: Cache Python Dependencies
      - name: Cache Python Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Step 4: Install System Dependencies
      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libstdc++6 python3-pip git zip wget unzip openjdk-17-jdk
          sudo apt-get install -y software-properties-common

      # Step 5: Add and Verify Focal Repository
      - name: Add Focal Repository
        run: |
          sudo add-apt-repository -y "deb http://archive.ubuntu.com/ubuntu focal main"
          sudo apt-get update

      - name: List Repositories
        run: |
          cat /etc/apt/sources.list
          ls -l /etc/apt/sources.list.d/

      # Step 6: Install libncurses5
      - name: Install libncurses5 from Focal
        run: |
          sudo apt-get install -y -t focal libncurses5

      - name: Pin Focal Repository for libncurses5
        run: |
          echo 'Package: libncurses5' | sudo tee /etc/apt/preferences.d/libncurses5-pin
          echo 'Pin: release n=focal' | sudo tee -a /etc/apt/preferences.d/libncurses5-pin
          echo 'Pin-Priority: 1001' | sudo tee -a /etc/apt/preferences.d/libncurses5-pin
          sudo apt-get update
          sudo apt-get install -y libncurses5

      - name: Manually Install libncurses5
        run: |
          wget http://archive.ubuntu.com/ubuntu/pool/main/n/ncurses/libncurses5_6.2-0ubuntu2_amd64.deb
          sudo dpkg -i libncurses5_6.2-0ubuntu2_amd64.deb
          sudo apt-get install -f

      - name: Verify libncurses5 Installation
        run: |
          dpkg -l | grep libncurses5 || { echo "libncurses5 installation failed"; exit 1; }

      # Step 7: Install Remaining Dependencies
      - name: Install Additional Dependencies
        run: |
          sudo apt-get install -y libffi-dev libssl-dev libbz2-dev liblzma-dev zlib1g-dev

      # Step 8: Install Python Dependencies
      - name: Install Python Dependencies
        run: |
          pip install --upgrade pip setuptools wheel
          pip install --upgrade buildozer python-for-android cython requests

      # Step 9: Set up Android SDK and NDK
      - name: Set up Android SDK and NDK
        run: |
          mkdir -p $HOME/android-sdk/cmdline-tools
          cd $HOME/android-sdk/cmdline-tools
          wget https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
          unzip commandlinetools-linux-*.zip
          mv cmdline-tools latest
          echo "ANDROID_SDK_ROOT=$HOME/android-sdk" >> $GITHUB_ENV
          echo "PATH=$HOME/android-sdk/cmdline-tools/latest/bin:$PATH" >> $GITHUB_ENV

          # Verify sdkmanager exists
          ls -l $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager || { echo "sdkmanager not found"; exit 1; }

          # Install required components
          yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --install "ndk;25.2.9519653" "platform-tools" "build-tools;34.0.0" "platforms;android-31" || { echo "SDK/NDK installation failed"; exit 1; }

      # Step 10: Accept Android Licenses
      - name: Accept Android Licenses
        run: |
          yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses > /dev/null 2>&1 || true

      # Step 11: Initialize Buildozer
      - name: Initialize Buildozer
        run: |
          buildozer init || { echo "Buildozer initialization failed"; exit 1; }

      # Step 12: Configure Buildozer Spec
      - name: Configure Buildozer Spec
        run: |
          echo "[app]" > buildozer.spec
          echo "title = Pokedex" >> buildozer.spec
          echo "package.name = pokedex" >> buildozer.spec
          echo "package.domain = org.example" >> buildozer.spec
          echo "source.dir = ." >> buildozer.spec
          echo "version = ${{ github.ref_name }}" >> buildozer.spec
          echo "requirements = kivy, kivymd, requests" >> buildozer.spec
          echo "source.include_exts = py,png,jpg,kv,atlas" >> buildozer.spec
          echo "android.accept_sdk_license = True" >> buildozer.spec
          echo "android.skip_update = False" >> buildozer.spec
          echo "android.ndk_version = 25b" >> buildozer.spec
          echo "android.api = 31" >> buildozer.spec
          echo "android.minapi = 21" >> buildozer.spec
          echo "android.archs = armeabi-v7a" >> buildozer.spec
          echo "android.permissions = INTERNET" >> buildozer.spec

      # Step 13: Clean Buildozer Cache
      - name: Clean Buildozer Cache
        run: |
          buildozer clean

      # Step 14: Build APK
      - name: Build APK
        run: |
          export PATH=$ANDROID_SDK_ROOT/build-tools/34.0.0:$PATH
          buildozer -v android debug --log_level=2 || { echo "APK build failed"; exit 1; }

      # Step 15: Verify APK Exists
      - name: Verify APK Exists
        run: |
          ls bin/*.apk || { echo "APK not found"; exit 1; }

      # Step 16: Upload APK Artifact
      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Pokedex-APK
          path: bin/*.apk